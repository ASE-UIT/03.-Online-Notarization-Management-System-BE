components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

    Notarizations:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              firebaseUrl:
                type: string
        notaryService:
          type: string
        notaryField:
          type: string
        requesterInfo:
          type: object
          properties:
            citizenId:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        sessionId:
          type: string
        notaryField:
          type: object
        notaryService:
          type: object
        sessionName:
          type: string
        startTime:
          type: string
        startDate:
          type: string
          format: date
        endTime:
          type: string
        endDate:
          type: string
          format: date
        users:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              status:
                type: string
                enum: [pending, accepted, rejected]
        createdBy:
          type: string
          format: objectId

      example:
        sessionId: 5ebac534954b54139806c112
        notaryField: { name: 'Notary Field 1' }
        notaryService: { name: 'Notary Service 1' }
        sessionName: 'Session 1'
        startTime: '10:00'
        startDate: '2024-05-12'
        endTime: '11:00'
        endDate: '2024-05-12'
        users: [{ email: 'user1@example.com', status: 'pending' }, { email: 'user2@example.com', status: 'accepted' }]
        createdBy: '5ebac534954b54139806c112'

    Role:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
      example:
        name: 'user'
        permissions: ['viewNotarizationHistory', 'uploadDocuments']

    Payment:
      type: object
      properties:
        id:
          type: string
        orderCode:
          type: string
          required: true
          unique: true
        amount:
          type: number
          required: true
        description:
          type: string
          required: true
        returnUrl:
          type: string
          required: true
        cancelUrl:
          type: string
          required: true
        checkoutUrl:
          type: string
        status:
          type: string
          enum: [pending, success, failed, cancelled]
          default: pending
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        default: now
      updatedAt:
        type: string
        format: date-time

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad request
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal server error

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
